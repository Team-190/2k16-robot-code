// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc190.frc2k16.commands;

import edu.wpi.first.wpilibj.PIDController;
import edu.wpi.first.wpilibj.command.Command;

import org.usfirst.frc190.frc2k16.Robot;
import org.usfirst.frc190.frc2k16.RobotMap;

/**
 *
 */
public class DriveStraightForDistance extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    private double m_distance;
    private double m_heading;
    private final double maxSpeed = .75;
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    private double angleKp = 0.03;
    private double speedMultiplier = 5;
    
    private double error = 1;
    
    private PIDController pid;
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public DriveStraightForDistance(double distance, double heading) {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        m_distance = distance;
        m_heading = heading;
        
        requires(Robot.driveTrain);

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	RobotMap.driveTrainGyro.reset();
    	RobotMap.driveTrainleftEncoder.reset();
    	RobotMap.driveTrainrightEncoder.reset();
    	PIDSource encoders = new PIDSource();
    	pid = new PIDController(4, 0, 0, , );
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	double angle = RobotMap.driveTrainGyro.getAngle(); 

    	double encoderAverage = 

    	
    	//System.out.println("Speed: " + speed);
    	System.out.println("Error: " + error);
    	System.out.println("Encoder Average " + Math.abs(RobotMap.driveTrainleftEncoder.get()) + Math.abs(RobotMap.driveTrainrightEncoder.get())/(2 * inchesToTicks));
    }
    	
    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
    	return Math.abs(RobotMap.driveTrainleftEncoder.get()) > m_distance && Math.abs(RobotMap.driveTrainrightEncoder.get()) > m_distance;
    }

    // Called once after isFinished returns true
    protected void end() {
    	Robot.driveTrain.arcadeDrive(0, 0);
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}
