// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc190.frc2k16.commands;

import edu.wpi.first.wpilibj.PIDController;


import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.PIDSource;
import org.usfirst.frc190.frc2k16.Robot;
import org.usfirst.frc190.frc2k16.RobotMap;
import org.usfirst.frc190.frc2k16.subsystems.DriveTrain;

public class DriveStraightForDistance extends Command {

    private double m_distance;
    private double m_heading;
    
    private double kP = 1;
    double Kp = 0.03;

    public DriveStraightForDistance(double distance, double heading) {

        m_distance = distance;
        m_heading = heading;
        
        requires(Robot.driveTrain);

    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	RobotMap.driveTrainGyro.reset();
    	RobotMap.driveTrainleftEncoder.reset();
    	RobotMap.driveTrainrightEncoder.reset();
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	
    	double angle = RobotMap.driveTrainGyro.getAngle();
    	System.out.println("Encoders: " + (RobotMap.driveTrainleftEncoder.getDistance() + RobotMap.driveTrainrightEncoder.getDistance())/2);
    	
    	double error = (((RobotMap.driveTrainleftEncoder.get() + RobotMap.driveTrainrightEncoder.get())/2) - m_distance) * kP;
    	System.out.println("Error: " + error);
    	Robot.driveTrain.arcadeDrive(error, -angle*Kp);
   }
    	
    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
    	return ((RobotMap.driveTrainleftEncoder.get() + RobotMap.driveTrainrightEncoder.get())/2)>= m_distance;
    }

    // Called once after isFinished returns true
    protected void end() {
    	Robot.driveTrain.arcadeDrive(0, 0);
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}
