// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc190.BloopBot;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.AnalogPotentiometer;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.Relay;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.Victor;
import edu.wpi.first.wpilibj.VictorSP;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static Encoder driveTrainLeftEncoder;
    public static Encoder driveTrainRightEncoder;
    public static SpeedController driveTrainBackLeftMotor;
    public static SpeedController driveTrainFrontLeftMotor;
    public static SpeedController driveTrainBackRightMotor;
    public static SpeedController driveTrainFrontRightMotor;
    public static RobotDrive driveTrainRobotDrive41;
    public static AnalogPotentiometer blooperBlooperPot;
    public static SpeedController blooperBlooperMotor;
    public static SpeedController frontCollectorCollectorActuationMotor;
    public static AnalogPotentiometer frontCollectorCollectorPot;
    public static Relay frontCollectorCollectorMotor;
    public static AnalogPotentiometer backManipulatorManipulatorPot;
    public static SpeedController backManipulatorManipulatorActuationMotor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrainLeftEncoder = new Encoder(0, 1, false, EncodingType.k4X);
        LiveWindow.addSensor("Drive Train", "Left Encoder", driveTrainLeftEncoder);
        driveTrainLeftEncoder.setDistancePerPulse(1.0);
        driveTrainLeftEncoder.setPIDSourceType(PIDSourceType.kRate);
        driveTrainRightEncoder = new Encoder(2, 3, false, EncodingType.k4X);
        LiveWindow.addSensor("Drive Train", "Right Encoder", driveTrainRightEncoder);
        driveTrainRightEncoder.setDistancePerPulse(1.0);
        driveTrainRightEncoder.setPIDSourceType(PIDSourceType.kRate);
        driveTrainBackLeftMotor = new Talon(0);
        LiveWindow.addActuator("Drive Train", "Back Left Motor", (Talon) driveTrainBackLeftMotor);
        
        driveTrainFrontLeftMotor = new Talon(1);
        LiveWindow.addActuator("Drive Train", "Front Left Motor", (Talon) driveTrainFrontLeftMotor);
        
        driveTrainBackRightMotor = new Talon(2);
        LiveWindow.addActuator("Drive Train", "Back Right Motor", (Talon) driveTrainBackRightMotor);
        
        driveTrainFrontRightMotor = new Talon(3);
        LiveWindow.addActuator("Drive Train", "Front Right Motor", (Talon) driveTrainFrontRightMotor);
        
        driveTrainRobotDrive41 = new RobotDrive(driveTrainFrontLeftMotor, driveTrainBackLeftMotor,
              driveTrainFrontRightMotor, driveTrainBackRightMotor);
        
        driveTrainRobotDrive41.setSafetyEnabled(true);
        driveTrainRobotDrive41.setExpiration(0.1);
        driveTrainRobotDrive41.setSensitivity(0.5);
        driveTrainRobotDrive41.setMaxOutput(1.0);

        blooperBlooperPot = new AnalogPotentiometer(0, 1.0, 0.0);
        LiveWindow.addSensor("Blooper", " Blooper Pot", blooperBlooperPot);
        
        blooperBlooperMotor = new Victor(4);
        LiveWindow.addActuator("Blooper", "Blooper Motor", (Victor) blooperBlooperMotor);
        
        frontCollectorCollectorActuationMotor = new VictorSP(6);
        LiveWindow.addActuator("Front Collector", "Collector Actuation Motor", (VictorSP) frontCollectorCollectorActuationMotor);
        
        frontCollectorCollectorPot = new AnalogPotentiometer(1, 1.0, 0.0);
        LiveWindow.addSensor("Front Collector", "Collector Pot", frontCollectorCollectorPot);
        
        frontCollectorCollectorMotor = new Relay(0);
        LiveWindow.addActuator("Front Collector", "Collector Motor", frontCollectorCollectorMotor);
        
        backManipulatorManipulatorPot = new AnalogPotentiometer(2, 1.0, 0.0);
        LiveWindow.addSensor("Back Manipulator", "Manipulator Pot", backManipulatorManipulatorPot);
        
        backManipulatorManipulatorActuationMotor = new VictorSP(7);
        LiveWindow.addActuator("Back Manipulator", "Manipulator Actuation Motor", (VictorSP) backManipulatorManipulatorActuationMotor);
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
